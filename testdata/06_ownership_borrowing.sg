// Ownership и borrowing
fn test_ownership() -> int {
    // Owned values
    let owned_string: own string = "Hello";
    let owned_number: own int = 42;

    // Move ownership
    let moved_string: own string = owned_string;
    // owned_string больше недоступен

    // Borrowing - shared references
    let borrowed: &int = &owned_number;
    let another_borrow: &int = &owned_number;

    // Mutable borrowing
    let mut mutable_value: int = 100;
    let mut_ref: &mut int = &mut mutable_value;

    return *borrowed;
}

fn take_ownership(data: own string) -> int {
    // Функция принимает ownership
    return data.len_chars();
}

fn borrow_immutable(data: &string) -> int {
    // Функция берет immutable borrow
    return data.len_chars();
}

fn borrow_mutable(data: &mut int) {
    // Функция берет mutable borrow
    *data = *data + 10;
}

fn test_function_parameters() -> int {
    let owned_text: own string = "Test";
    let mut number: int = 50;

    // Передача ownership
    let length: int = take_ownership(owned_text);
    // owned_text больше недоступен

    let another_text: own string = "Another";

    // Передача borrow
    let length2: int = borrow_immutable(&another_text);
    // another_text все еще доступен

    // Mutable borrow
    borrow_mutable(&mut number);
    // number = 60

    return length + length2 + number;
}

// Raw pointers (unsafe)
fn test_raw_pointers() -> int {
    let value: int = 42;
    let raw_ptr: *int = &value;

    // Dereferencing требует explicit call
    let dereferenced: int = deref(raw_ptr);

    return dereferenced;
}