package token

import "strconv"

func (k Kind) String() string {
	switch k {
	case Invalid:
		return "Invalid"
	case EOF:
		return "EOF"
	case Ident:
		return "Ident"
	case KwFn:
		return "KwFn"
	case KwLet:
		return "KwLet"
	case KwMut:
		return "KwMut"
	case KwOwn:
		return "KwOwn"
	case KwIf:
		return "KwIf"
	case KwElse:
		return "KwElse"
	case KwWhile:
		return "KwWhile"
	case KwFor:
		return "KwFor"
	case KwIn:
		return "KwIn"
	case KwBreak:
		return "KwBreak"
	case KwContinue:
		return "KwContinue"
	case KwReturn:
		return "KwReturn"
	case KwImport:
		return "KwImport"
	case KwAs:
		return "KwAs"
	case KwType:
		return "KwType"
	case KwNewtype:
		return "KwNewtype"
	case KwAlias:
		return "KwAlias"
	case KwLiteral:
		return "KwLiteral"
	case KwTag:
		return "KwTag"
	case KwExtern:
		return "KwExtern"
	case KwPub:
		return "KwPub"
	case KwAsync:
		return "KwAsync"
	case KwAwait:
		return "KwAwait"
	case KwCompare:
		return "KwCompare"
	case KwFinally:
		return "KwFinally"
	case KwChannel:
		return "KwChannel"
	case KwSpawn:
		return "KwSpawn"
	case KwTrue:
		return "KwTrue"
	case KwFalse:
		return "KwFalse"
	case KwSignal:
		return "KwSignal"
	case KwParallel:
		return "KwParallel"
	case KwMacro:
		return "KwMacro"
	case KwPragma:
		return "KwPragma"
	case KwTo:
		return "KwTo"
	case KwHeir:
		return "KwHeir"
	case KwIs:
		return "KwIs"
	case NothingLit:
		return "NothingLit"
	case IntLit:
		return "IntLit"
	case UintLit:
		return "UintLit"
	case FloatLit:
		return "FloatLit"
	case BoolLit:
		return "BoolLit"
	case StringLit:
		return "StringLit"
	case Plus:
		return "Plus"
	case Minus:
		return "Minus"
	case Star:
		return "Star"
	case Slash:
		return "Slash"
	case Percent:
		return "Percent"
	case Assign:
		return "Assign"
	case EqEq:
		return "EqEq"
	case Bang:
		return "Bang"
	case BangEq:
		return "BangEq"
	case Lt:
		return "Lt"
	case LtEq:
		return "LtEq"
	case Gt:
		return "Gt"
	case GtEq:
		return "GtEq"
	case Shl:
		return "Shl"
	case Shr:
		return "Shr"
	case Amp:
		return "Amp"
	case Pipe:
		return "Pipe"
	case Caret:
		return "Caret"
	case AndAnd:
		return "AndAnd"
	case OrOr:
		return "OrOr"
	case Question:
		return "Question"
	case Colon:
		return "Colon"
	case ColonColon:
		return "ColonColon"
	case Semicolon:
		return "Semicolon"
	case Comma:
		return "Comma"
	case Dot:
		return "Dot"
	case DotDot:
		return "DotDot"
	case Arrow:
		return "Arrow"
	case FatArrow:
		return "FatArrow"
	case LParen:
		return "LParen"
	case RParen:
		return "RParen"
	case LBrace:
		return "LBrace"
	case RBrace:
		return "RBrace"
	case LBracket:
		return "LBracket"
	case RBracket:
		return "RBracket"
	case At:
		return "At"
	case Underscore:
		return "Underscore"
	case DotDotEq:
		return "DotDotEq"
	case DotDotDot:
		return "DotDotDot"
	default:
		return "Kind(" + strconv.Itoa(int(k)) + ")"
	}
}

// IsEOF проверяет, является ли токен EOF
func (k Kind) IsEOF() bool {
	return k == EOF
}